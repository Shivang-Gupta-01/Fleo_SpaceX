{"version":3,"sources":["rocket.gif","components/RocketLaunchDetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RocketLaunchDetails","details","flight_number","mission_name","mission_id","launch_year","launch_success","links","rocket","imgSrc","mission_patch_small","land_success","first_stage","cores","Card","className","key","src","alt","API_BASE_URL","App","props","toggle","isOpen","openParam","setState","isFilterOpen","console","log","state","isYearOpen","isLaunchOpen","isLandOpen","items","isLoaded","filters","limit","undefined","querystring","stringify","URL","this","getUpdatedApiUrl","fetch","then","response","json","data","fetchAPI","type","value","uniqueLaunchYears","Array","fill","map","_","index","Row","Col","md","lg","Body","Title","onClick","style","marginBottom","year","Button","variant","toString","e","updateApiFilters","target","color","Container","fluid","xs","sm","loader","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c65dfd68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rocket.0ff414b4.gif\";","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport \"./RocketLaunchDetails.css\";\r\n\r\nfunction RocketLaunchDetails({ details }) {\r\n  const {\r\n    flight_number,\r\n    mission_name,\r\n    mission_id,\r\n    launch_year,\r\n    launch_success,\r\n    links,\r\n    rocket,\r\n  } = details;\r\n  const imgSrc = links.mission_patch_small;\r\n  const land_success = rocket.first_stage.cores[0].land_success;\r\n\r\n  return (\r\n    <Card className=\"Rocket-details-card\">\r\n      <div key={flight_number}>\r\n        <div>\r\n          <img\r\n            src={imgSrc}\r\n            alt=\"mission patch img not available on api\"\r\n            className=\"Rocket-mission-image\"\r\n          />\r\n        </div>\r\n        <div className=\"Rocket-mission-name-flight-number\">\r\n          {mission_name} #{flight_number}\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Mission Ids:{\" \"}\r\n          <ul>\r\n            {\" \"}\r\n            <li className=\"Rocket-detail-value\">{mission_id}</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Launch Year:{\" \"}\r\n          <span className=\"Rocket-detail-value\">{launch_year}</span>\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Launch:{\" \"}\r\n          <span className=\"Rocket-detail-value\">\r\n            {launch_success ? \"Successful \" : \"Failure\"}\r\n          </span>\r\n        </div>\r\n        <div className=\"Rocket-detail-label\">\r\n          Landing:{\" \"}\r\n          <span className=\"Rocket-detail-value\">\r\n            {land_success ? \"Successful\" : \"Failure\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RocketLaunchDetails;\r\n","import React, { Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Card, Button, Row, Col} from 'react-bootstrap';\r\nimport {IoIosArrowDropdown } from \"react-icons/io\";\r\nimport RocketLaunchDetails from './components/RocketLaunchDetails';\r\nimport querystring from 'querystring';\r\nimport './App.css';\r\nimport loader from './rocket.gif';\r\nconst API_BASE_URL = \"https://api.spacexdata.com/v3/launches?limit=100\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      isLoaded: false,\r\n      isFilterOpen:false,\r\n      isLaunchOpen :false,\r\n      isYearOpen: false,\r\n      isLandOpen: false,\r\n\r\n      filters: {\r\n        limit: 150,\r\n        launch_year: undefined,\r\n        launch_success: undefined,\r\n        land_success: undefined,\r\n      },\r\n    }\r\n  }\r\n toggle = (isOpen,openParam) => {\r\n\r\n  if((openParam===\"filter\"))\r\n  {\r\n    this.setState({\r\n      isFilterOpen: !isOpen\r\n     },()=>{\r\n       console.log(this.state);\r\n     })\r\n  }\r\n  else if ((openParam===\"year\"))\r\n   {this.setState({\r\n    isYearOpen: !isOpen\r\n   },()=>{\r\n     console.log(this.state);\r\n   })}\r\n   else if(openParam===\"launch\")\r\n   {\r\n    this.setState({\r\n      isLaunchOpen: !isOpen\r\n     },()=>{\r\n       console.log(this.state);\r\n     })\r\n   }\r\n   else if(openParam===\"land\")\r\n   {\r\n    this.setState({\r\n      isLandOpen: !isOpen\r\n     },()=>{\r\n       console.log(this.state);\r\n     })\r\n   }\r\n   \r\n }\r\n\r\n  getUpdatedApiUrl(filters = {}) {\r\n    return API_BASE_URL + querystring.stringify({ ...filters });\r\n  }\r\n\r\n  fetchAPI(filters) {\r\n    const URL = this.getUpdatedApiUrl(filters);\r\n    this.setState({ isLoaded: false, filters });\r\n    fetch(URL)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          data\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchAPI(this.state.filters);\r\n  }\r\n\r\n  updateApiFilters(type, value) {\r\n    \r\n    if (this.state.filters[type] === value) {\r\n      value = undefined;\r\n    }\r\n\r\n    const filters = {\r\n      ...this.state.filters,\r\n      [type]: value,\r\n    };\r\n\r\n    this.fetchAPI(filters);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { isLoaded, data } = this.state;\r\n    const uniqueLaunchYears = new Array(16).fill(0).map((_, index) => 2006 + index);\r\n    if (!isLoaded) {\r\n      return <div className=\"App-loader-container\">\r\n        <div className=\"App-loader-box\">\r\n          <img src={loader} alt=\"loading...\" />\r\n        </div>\r\n      </div>\r\n    }\r\n\r\n    else {\r\n\r\n      return (\r\n        <div className=\"App\">\r\n          <Row>\r\n          <h1 className=\"App-header\">SpaceX</h1>\r\n          </Row>\r\n          \r\n          <Row className=\"Filter_List\">\r\n          <Col md={4} lg={4}>\r\n          <Card className=\"App-filter-card\">\r\n                  <Card.Body>\r\n                      <Card.Title className=\"App-filter-heading-launch-year\">\r\n                        Launch year\r\n                      <span className=\"year\" onClick={() => {this.toggle(this.state.isYearOpen,\"year\")}} style={{ marginBottom: '1rem' }}><IoIosArrowDropdown/></span>\r\n                      <hr className=\"App-filters-hr\" />\r\n                    </Card.Title>\r\n                    {\r\n                    this.state.isYearOpen ? <Row>\r\n                      <div className=\"App-filter-button-container\">\r\n                        {\r\n                        uniqueLaunchYears.map((year) => {\r\n                          return (\r\n                            <Button\r\n                              className=\"App-filter-button\"\r\n                              variant={\r\n                                this.state.filters.launch_year ===\r\n                                year.toString()\r\n                                  ? \"success\"\r\n                                  : \"outline-success\"\r\n                              }\r\n                              value={year}\r\n                              onClick={(e) =>\r\n                                this.updateApiFilters(\r\n                                  \"launch_year\",\r\n                                  e.target.value\r\n                                )\r\n                              }\r\n                            >\r\n                              {year}\r\n                            </Button>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </Row> :\r\n                    null }\r\n                    </Card.Body>\r\n                    </Card>\r\n          </Col>\r\n\r\n          <Col md={4} lg={4}>\r\n          <Card className=\"App-filter-card\">\r\n                  <Card.Body>\r\n                      <Card.Title className=\"App-filter-heading-launch-year\">\r\n                        Launch Status<span className=\"Launchbtn\" color=\"primary\"  onClick={() => {this.toggle(this.state.isLaunchOpen,\"launch\")}} style={{ marginBottom: '1rem' }}><IoIosArrowDropdown/></span>\r\n                      <hr className=\"App-filters-hr\" />\r\n                    </Card.Title>\r\n                    {\r\n                    this.state.isLaunchOpen ?\r\n                    <div className=\"App-filter-button-container\">\r\n                      <Button\r\n                        className=\"App-filter-button\"\r\n                        variant={\r\n                          this.state.filters.launch_success === \"true\"\r\n                            ? \"success\"\r\n                            : \"outline-success\"\r\n                        }\r\n                        onClick={(e) =>\r\n                          this.updateApiFilters(\r\n                            \"launch_success\",\r\n                            e.target.value\r\n                          )\r\n                        }\r\n                        value=\"true\"\r\n                      >\r\n                        Success\r\n                      </Button>\r\n\r\n                      <Button\r\n                        className=\"App-filter-button\"\r\n                        variant={\r\n                          this.state.filters.launch_success === \"false\"\r\n                            ? \"success\"\r\n                            : \"outline-success\"\r\n                        }\r\n                        onClick={(e) =>\r\n                          this.updateApiFilters(\r\n                            \"launch_success\",\r\n                            e.target.value\r\n                          )\r\n                        }\r\n                        value=\"false\"\r\n                      >\r\n                        Failure\r\n                      </Button>\r\n                    </div>\r\n                    : null }\r\n                    </Card.Body>\r\n                    </Card>\r\n          </Col>\r\n\r\n          <Col md={4} lg={4}>\r\n          <Card className=\"App-filter-card\">\r\n                  <Card.Body>\r\n                      <Card.Title className=\"App-filter-heading-launch-year\">\r\n                        Land Status<span className=\"Launchbtn\" color=\"primary\"  onClick={() => {this.toggle(this.state.isLandOpen,\"land\")}} style={{ marginBottom: '1rem' }}><IoIosArrowDropdown/></span>\r\n                      <hr className=\"App-filters-hr\" />\r\n                    </Card.Title>\r\n                    {\r\n                    this.state.isLandOpen ?\r\n                    <div className=\"App-filter-button-container\">\r\n                      <Button\r\n                        className=\"App-filter-button\"\r\n                        variant={\r\n                          this.state.filters.land_success === \"true\"\r\n                            ? \"success\"\r\n                            : \"outline-success\"\r\n                        }\r\n                        onClick={(e) =>\r\n                          this.updateApiFilters(\"land_success\", e.target.value)\r\n                        }\r\n                        value=\"true\"\r\n                      >\r\n                       Success\r\n                      </Button>\r\n\r\n                      <Button\r\n                        className=\"App-filter-button\"\r\n                        variant={\r\n                          this.state.filters.land_success === \"false\"\r\n                            ? \"success\"\r\n                            : \"outline-success\"\r\n                        }\r\n                        onClick={(e) =>\r\n                          this.updateApiFilters(\"land_success\", e.target.value)\r\n                        }\r\n                        value=\"false\"\r\n                      >\r\n                        Failure\r\n                      </Button>\r\n                    </div>\r\n                  :null}\r\n                    </Card.Body>\r\n                    </Card>\r\n          </Col>\r\n          </Row>\r\n\r\n          <Container fluid>\r\n            <Row>\r\n              <Col xs={12} sm={12} md={12} lg={12}>\r\n                <Row>\r\n                  {data.map((details) => {\r\n                    return (\r\n                      <Col md={12} lg={3}>\r\n                        <RocketLaunchDetails details={details} />\r\n                      </Col>\r\n                    );\r\n                  })}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            <div>\r\n              <h5 className=\"App-Developers-name\">\r\n               Shivang Gupta\r\n              </h5>\r\n            </div>\r\n          </Container>\r\n      </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}